/*----------------------------------------------------------------------------- * 3 Dimensional Multivariate Data Visualization *----------------------------------------------------------------------------- *      Class:          MagnetAttributes *      Description:        *----------------------------------------------------------------------------- *      Author:         Ronald H. Baker (Brown University Masters Student)                   *      Date:           7/11/2019 *      Notes:           *                       *      Revision History: *       *      (7/11/2019) - Software Refactor - This file was generated to handle the *----------------------------------------------------------------------------- * This program is free software: you can redistribute it and/or modify it  * under the terms of the GNU General Public License as published by the Free  * Software Foundation, either version 3 of the License, or (at your option) any  * later version. *  * This program is distributed in the hope that it will be useful, but WITHOUT  * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS  * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. */using UnityEngine;/// <summary>/// Magnet attributes./// </summary>public class MagnetAttributes : MonoBehaviour {    //********Public Variables********    // Editor options    private bool magnetActive = true;    private bool allowMagnetism = false;    [Range(-1.000f, 1.000f)]    private float magnetismStrength = 0.000f;    //********Private Variables********    private float maxValue;    private float minValue;    private Vector3 lastPosition;    private readonly int distance = 3;    public float MaxValue { get => maxValue; set => maxValue = value; }    public float MinValue { get => minValue; set => minValue = value; }    public Vector3 LastPosition { get => lastPosition; set => lastPosition = value; }    public bool MagnetActive { get => magnetActive; set => magnetActive = value; }    public bool AllowMagnetism { get => allowMagnetism; set => allowMagnetism = value; }    public float MagnetismStrength { get => magnetismStrength; set => magnetismStrength = value; }    /// <summary>    /// On the mouse drag.    /// </summary>    private void OnMouseDrag()     {        Vector3 mousePosition = new Vector3(Input.mousePosition.x, Input.mousePosition.y, distance);        Vector3 objPosition = Camera.main.ScreenToWorldPoint(mousePosition);        transform.position = objPosition;    }    /// <summary>    /// Calculates the attraction force.    /// </summary>    /// <returns>The attraction force.</returns>    /// <param name="incomingPointValue">Incoming point value.</param>    public float CalculateAttractionForce(float incomingPointValue )    {        if (magnetActive && AllowMagnetism)        {            if ((minValue <= incomingPointValue) && (incomingPointValue <= maxValue))            {                return ((incomingPointValue - minValue) / (maxValue - minValue)) * MagnetismStrength * 2;             }        }        return 0;    }    /// <summary>    /// Calculates the direction.    /// </summary>    /// <returns>The direction.</returns>    /// <param name="target">Target.</param>    public Vector3 CalculateDirection ( Vector3 target )    {        return LastPosition - target;     }}